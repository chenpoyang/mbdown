!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALL_OBJ	Makefile	/^ALL_OBJ	= global.o mbdown.o url.o synchro.o bmsg.o http.o$/;"	m
ALL_T	Makefile	/^ALL_T		= mbdown$/;"	m
Bmsg	bmsg.h	/^}Bmsg;$/;"	t	typeref:struct:bmsg
CC	Makefile	/^CC			= gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS		= -O2 -Wall -g $(DEFINES)$/;"	m
COM_LEN	http.h	8;"	d
CONNECT	http.h	/^	CONNECT$/;"	e	enum:method
CXXFLAGS	Makefile	/^CXXFLAGS	= -O2 -Wall -g $(DEFINES)$/;"	m
DEFAULT_HTTPV	http.h	10;"	d
DEFAULT_MTHD	http.h	9;"	d
DELETE	http.h	/^	DELETE, $/;"	e	enum:method
GET	http.h	/^	GET, $/;"	e	enum:method
GLOBAL	global.h	10;"	d
HALEN	global.h	12;"	d
HEAD	http.h	/^	HEAD, $/;"	e	enum:method
HLEN	url.h	7;"	d
HTTP0_9	http.h	/^	HTTP0_9,$/;"	e	enum:httpv
HTTP1_0	http.h	/^	HTTP1_0,$/;"	e	enum:httpv
HTTP1_1	http.h	/^	HTTP1_1$/;"	e	enum:httpv
H_LEN	http.h	7;"	d
HaUrl	url.h	/^}HaUrl;$/;"	t	typeref:struct:hash_url
LLEN	url.h	9;"	d
MAXBUF	global.h	26;"	d
MAXLINE	global.h	24;"	d
MAX_ETH_MTU	global.h	14;"	d
MAX_LEN	http.h	5;"	d
MAX_URL_ID	url.h	13;"	d
M_HIDE	global.h	17;"	d
M_LOCK	synchro.h	9;"	d
M_SHOW	global.h	18;"	d
M_UNLOCK	synchro.h	13;"	d
OPTIONS	http.h	/^	OPTIONS, $/;"	e	enum:method
POST	http.h	/^	POST, $/;"	e	enum:method
PUT	http.h	/^	PUT, $/;"	e	enum:method
R_LEN	http.h	6;"	d
Req	http.h	/^}Req;$/;"	t	typeref:struct:req
Resp	http.h	/^}Resp;$/;"	t	typeref:struct:resp
RootBmsg	bmsg.h	/^}RootBmsg;$/;"	t	typeref:struct:root_bmsg
RootUrl	url.h	/^}Url, RootUrl;$/;"	t	typeref:struct:url
SLEN	url.h	11;"	d
TRACE	http.h	/^	TRACE, $/;"	e	enum:method
ULEN	url.h	5;"	d
UNIT	bmsg.h	5;"	d
Url	url.h	/^}Url, RootUrl;$/;"	t	typeref:struct:url
_BMSG_H_	bmsg.h	2;"	d
_GLOBAL_H_	global.h	2;"	d
_HTTP_H_	http.h	2;"	d
_SYNCHRO_H_	synchro.h	2;"	d
_URL_H_	url.h	2;"	d
add_bmsg	bmsg.c	/^void add_bmsg(RootBmsg *root_bmsg, Bmsg *bmsg)$/;"	f	signature:(RootBmsg *root_bmsg, Bmsg *bmsg)
add_bmsg	bmsg.h	/^void add_bmsg(RootBmsg *root_bmsg, Bmsg *bmsg);$/;"	p	signature:(RootBmsg *root_bmsg, Bmsg *bmsg)
add_bmsg_header	bmsg.c	/^void add_bmsg_header(Bmsg *header, Bmsg *bmsg)$/;"	f	signature:(Bmsg *header, Bmsg *bmsg)
add_bmsg_header	bmsg.h	/^void add_bmsg_header(Bmsg *header, Bmsg *bmsg);$/;"	p	signature:(Bmsg *header, Bmsg *bmsg)
add_new_url	url.c	/^void add_new_url(RootUrl *root_url, Url *url, HaUrl *ha_table, const int ha_len)$/;"	f	signature:(RootUrl *root_url, Url *url, HaUrl *ha_table, const int ha_len)
add_new_url	url.h	/^void add_new_url(RootUrl *root_url, Url *url, HaUrl *ha_table, const int ha_len);$/;"	p	signature:(RootUrl *root_url, Url *url, HaUrl *ha_table, const int ha_len)
add_url_header	bmsg.c	/^void add_url_header(RootBmsg *root_bmsg, const Bmsg *header)$/;"	f	signature:(RootBmsg *root_bmsg, const Bmsg *header)
add_url_header	bmsg.h	/^void add_url_header(RootBmsg *root_bmsg, const Bmsg *header);$/;"	p	signature:(RootBmsg *root_bmsg, const Bmsg *header)
append_bytes	mbdown.c	/^void append_bytes(FILE *file, const char *buf, const int size)$/;"	f	signature:(FILE *file, const char *buf, const int size)
append_bytes	mbdown.c	/^void append_bytes(FILE *file, const char *buf, const int size);$/;"	p	file:	signature:(FILE *file, const char *buf, const int size)
begin	bmsg.h	/^	unsigned short begin;$/;"	m	struct:bmsg	access:public
begin	http.h	/^	unsigned begin;	\/* 回应的起始字节 *\/$/;"	m	struct:resp	access:public
begin	http.h	/^	unsigned int begin;	\/* 起始字节 *\/$/;"	m	struct:req	access:public
bmsg	bmsg.h	/^typedef struct bmsg {$/;"	s
bmsg::begin	bmsg.h	/^	unsigned short begin;$/;"	m	struct:bmsg	access:public
bmsg::end	bmsg.h	/^	unsigned short end;$/;"	m	struct:bmsg	access:public
bmsg::next	bmsg.h	/^	struct bmsg *next;		\/* single linked list *\/$/;"	m	struct:bmsg	typeref:struct:bmsg::bmsg	access:public
bmsg::next_hdr	bmsg.h	/^	struct bmsg *next_hdr;	\/* netx url bmsgs *\/$/;"	m	struct:bmsg	typeref:struct:bmsg::bmsg	access:public
bmsg::to_bps	bmsg.h	/^	int to_bps;		\/* the numbsers of breakpoints *\/$/;"	m	struct:bmsg	access:public
bmsg::to_bytes	bmsg.h	/^	int to_bytes;$/;"	m	struct:bmsg	access:public
bmsg::url_id	bmsg.h	/^	int url_id;$/;"	m	struct:bmsg	access:public
bzero	global.h	15;"	d
count_url_id	mbdown.c	/^GLOBAL unsigned int count_url_id;		\/* for generating unique url id *\/$/;"	v
count_url_id	url.c	/^static unsigned int count_url_id = 0;	\/* for generating unique url id *\/$/;"	v	file:
download	mbdown.c	/^void download(const Url *url)$/;"	f	signature:(const Url *url)
download	mbdown.c	/^void download(const Url *url);$/;"	p	file:	signature:(const Url *url)
end	bmsg.h	/^	unsigned short end;$/;"	m	struct:bmsg	access:public
end	http.h	/^	unsigned end;		\/* 回应的结束字节 *\/$/;"	m	struct:resp	access:public
end	http.h	/^	unsigned int end;		\/* 结束字节 *\/$/;"	m	struct:req	access:public
enum_httpv_to_str	http.c	/^void enum_httpv_to_str(char *str, enum httpv ver)$/;"	f	signature:(char *str, enum httpv ver)
enum_httpv_to_str	http.h	/^void enum_httpv_to_str(char *str, enum httpv ver);$/;"	p	signature:(char *str, enum httpv ver)
enum_mthd_to_str	http.c	/^void enum_mthd_to_str(char *str, enum method mthd)$/;"	f	signature:(char *str, enum method mthd)
enum_mthd_to_str	http.h	/^void enum_mthd_to_str(char *str, enum method mthd);$/;"	p	signature:(char *str, enum method mthd)
escape_spec	url.c	/^void escape_spec(const char *res, char *buf)$/;"	f	signature:(const char *res, char *buf)
escape_spec	url.h	/^void escape_spec(const char *res, char *ret_str);$/;"	p	signature:(const char *res, char *ret_str)
find_url	url.c	/^Url * find_url(HaUrl *url_htable, const int len, const int url_id)$/;"	f	signature:(HaUrl *url_htable, const int len, const int url_id)
find_url	url.h	/^Url * find_url(HaUrl *url_htable, const int len, const int url_id);$/;"	p	signature:(HaUrl *url_htable, const int len, const int url_id)
find_url_header	bmsg.c	/^Bmsg * find_url_header(const RootBmsg *root_bmsg, const int url_id)$/;"	f	signature:(const RootBmsg *root_bmsg, const int url_id)
find_url_header	bmsg.h	/^Bmsg * find_url_header(const RootBmsg *root_bmsg, const int url_id);$/;"	p	signature:(const RootBmsg *root_bmsg, const int url_id)
get	mbdown.c	/^void get(const char *url)$/;"	f	signature:(const char *url)
get	mbdown.c	/^void get(const char *url);$/;"	p	file:	signature:(const char *url)
get_data	mbdown.c	/^void get_data(const int fd, char *buf, const char *req)$/;"	f	signature:(const int fd, char *buf, const char *req)
get_data	mbdown.c	/^void get_data(const int fd, char *buf, const char *req);$/;"	p	file:	signature:(const int fd, char *buf, const char *req)
get_host_name	url.c	/^void get_host_name(const char *url, char *hostname)$/;"	f	signature:(const char *url, char *hostname)
get_host_name	url.h	/^void get_host_name(const char *url, char *hostname);$/;"	p	signature:(const char *url, char *hostname)
get_port	url.c	/^int get_port(const char *url)$/;"	f	signature:(const char *url)
get_port	url.h	/^int get_port(const char *url);$/;"	p	signature:(const char *url)
get_resource	url.c	/^void get_resource(const char *url, char *resource)$/;"	f	signature:(const char *url, char *resource)
get_resource	url.h	/^void get_resource(const char *url, char *resource);$/;"	p	signature:(const char *url, char *resource)
get_scheme	url.c	/^void get_scheme(const char *url, char *scheme)$/;"	f	signature:(const char *url, char *scheme)
get_scheme	url.h	/^void get_scheme(const char *url, char *scheme);$/;"	p	signature:(const char *url, char *scheme)
get_url_id	url.c	/^unsigned int get_url_id()$/;"	f
get_url_id	url.h	/^unsigned int get_url_id();$/;"	p	signature:()
hash_url	url.c	/^void hash_url(HaUrl *url_htable, Url *url, const int ha_len)$/;"	f	signature:(HaUrl *url_htable, Url *url, const int ha_len)
hash_url	url.h	/^typedef struct hash_url {$/;"	s
hash_url	url.h	/^void hash_url(HaUrl *url_htable, Url *url, const int ha_len);$/;"	p	signature:(HaUrl *url_htable, Url *url, const int ha_len)
hash_url::next	url.h	/^	struct hash_url *next;$/;"	m	struct:hash_url	typeref:struct:hash_url::hash_url	access:public
hash_url::url	url.h	/^	struct url *url;$/;"	m	struct:hash_url	typeref:struct:hash_url::url	access:public
head	bmsg.h	/^	struct bmsg *head;$/;"	m	struct:root_bmsg	typeref:struct:root_bmsg::bmsg	access:public
host	http.h	/^	char host[H_LEN];		\/* 主机 *\/$/;"	m	struct:req	access:public
host	url.h	/^	char host[HLEN];	\/* remote host, eg: www.innlab.net *\/$/;"	m	struct:url	access:public
httpv	http.h	/^enum httpv {$/;"	g
id	url.h	/^	unsigned int id;				\/* unique id for quickly find *\/$/;"	m	struct:url	access:public
init_hash_table	url.c	/^void init_hash_table(HaUrl *url_htable, const int len)$/;"	f	signature:(HaUrl *url_htable, const int len)
init_hash_table	url.h	/^void init_hash_table(HaUrl *url_htable, const int len);$/;"	p	signature:(HaUrl *url_htable, const int len)
init_hatable_rooturl_id	url.c	/^void init_hatable_rooturl_id()$/;"	f
init_hatable_rooturl_id	url.h	/^void init_hatable_rooturl_id();$/;"	p	signature:()
init_req	http.c	/^void init_req(Req *req, const Url *url, unsigned int beg, unsigned int end)$/;"	f	signature:(Req *req, const Url *url, unsigned int beg, unsigned int end)
init_req	http.h	/^void init_req(Req *req, const Url *url, unsigned int beg, unsigned int end);$/;"	p	signature:(Req *req, const Url *url, unsigned int beg, unsigned int end)
init_resp	http.c	/^void init_resp(Resp *resp, const char *str)$/;"	f	signature:(Resp *resp, const char *str)
init_resp	http.h	/^void init_resp(Resp *resp, const char *str);$/;"	p	signature:(Resp *resp, const char *str)
init_root_bmsg	bmsg.c	/^void init_root_bmsg(RootBmsg *root_bmsg)$/;"	f	signature:(RootBmsg *root_bmsg)
init_root_bmsg	bmsg.h	/^void init_root_bmsg(RootBmsg *root_bmsg);$/;"	p	signature:(RootBmsg *root_bmsg)
init_root_url	url.c	/^void init_root_url(RootUrl *root_url)$/;"	f	signature:(RootUrl *root_url)
init_root_url	url.h	/^void init_root_url(RootUrl *root_url);$/;"	p	signature:(RootUrl *root_url)
init_url_msg	url.c	/^void init_url_msg(Url *cur, const char *url)$/;"	f	signature:(Url *cur, const char *url)
init_url_msg	url.h	/^void init_url_msg(Url *url, const char *url_str);$/;"	p	signature:(Url *url, const char *url_str)
m_atou	global.c	/^unsigned int m_atou(const char *str)$/;"	f	signature:(const char *str)
m_atou	global.h	/^unsigned int m_atou(const char *str);$/;"	p	signature:(const char *str)
m_error	global.h	8;"	d
m_protect	synchro.h	/^pthread_mutex_t m_protect;$/;"	v
m_tolower	global.c	/^void m_tolower(char *str)$/;"	f	signature:(char *str)
m_tolower	global.h	/^void m_tolower(char *str);$/;"	p	signature:(char *str)
m_toupper	global.c	/^void m_toupper(char *str)$/;"	f	signature:(char *str)
m_toupper	global.h	/^void m_toupper(char *str);$/;"	p	signature:(char *str)
m_utoa	global.c	/^void m_utoa(unsigned int num, char *str)$/;"	f	signature:(unsigned int num, char *str)
m_utoa	global.h	/^void m_utoa(unsigned int num, char *str);$/;"	p	signature:(unsigned int num, char *str)
main	mbdown.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
merr_deal	global.c	/^void merr_deal(const int flg, const char *fmt, va_list ap)$/;"	f	signature:(const int flg, const char *fmt, va_list ap)
merr_deal	global.h	/^void merr_deal(const int flg, const char *fmt, va_list ap);$/;"	p	signature:(const int flg, const char *fmt, va_list ap)
merr_dump	global.c	/^void merr_dump(const char *fmt, ...)$/;"	f	signature:(const char *fmt, ...)
merr_dump	global.h	/^void merr_dump(const char *fmt, ...);$/;"	p	signature:(const char *fmt, ...)
merr_msg	global.c	/^void merr_msg(const char *fmt, ...)$/;"	f	signature:(const char *fmt, ...)
merr_msg	global.h	/^void merr_msg(const char *fmt, ...);$/;"	p	signature:(const char *fmt, ...)
merr_quit	global.c	/^void merr_quit(const char *fmt, ...)$/;"	f	signature:(const char *fmt, ...)
merr_quit	global.h	/^void merr_quit(const char *fmt, ...);$/;"	p	signature:(const char *fmt, ...)
merr_sys	global.c	/^void merr_sys(const char *fmt, ...)$/;"	f	signature:(const char *fmt, ...)
merr_sys	global.h	/^void merr_sys(const char *fmt, ...);$/;"	p	signature:(const char *fmt, ...)
method	http.h	/^enum method {$/;"	g
mthd	http.h	/^	enum method mthd;		\/* 请求方式 *\/$/;"	m	struct:req	typeref:enum:req::method	access:public
mydebug	global.c	/^void mydebug(const char *fmt, ...)$/;"	f	signature:(const char *fmt, ...)
mydebug	global.h	/^void mydebug(const char *fmt, ...);$/;"	p	signature:(const char *fmt, ...)
new_url_node	url.c	/^Url * new_url_node(RootUrl *root_url, const char *url, HaUrl *ha_table, const int ha_len)$/;"	f	signature:(RootUrl *root_url, const char *url, HaUrl *ha_table, const int ha_len)
new_url_node	url.h	/^Url * new_url_node(RootUrl *root_url, const char *url, HaUrl *ha_table, const int ha_len);$/;"	p	signature:(RootUrl *root_url, const char *url, HaUrl *ha_table, const int ha_len)
next	bmsg.h	/^	struct bmsg *next;		\/* single linked list *\/$/;"	m	struct:bmsg	typeref:struct:bmsg::bmsg	access:public
next	url.h	/^	struct hash_url *next;$/;"	m	struct:hash_url	typeref:struct:hash_url::hash_url	access:public
next	url.h	/^	struct url *next;	\/* single linked list *\/$/;"	m	struct:url	typeref:struct:url::url	access:public
next_hdr	bmsg.h	/^	struct bmsg *next_hdr;	\/* netx url bmsgs *\/$/;"	m	struct:bmsg	typeref:struct:bmsg::bmsg	access:public
port	http.h	/^    unsigned int port;		\/* default: 80 *\/$/;"	m	struct:req	access:public
port	url.h	/^	int port;$/;"	m	struct:url	access:public
release_all	url.c	/^void release_all(RootUrl *root_url, HaUrl *hatable, const int len)$/;"	f	signature:(RootUrl *root_url, HaUrl *hatable, const int len)
release_all	url.h	/^void release_all(RootUrl *root_url, HaUrl *hatable, const int len);$/;"	p	signature:(RootUrl *root_url, HaUrl *hatable, const int len)
release_hatable	url.c	/^void release_hatable(HaUrl *hatable, const int len)$/;"	f	signature:(HaUrl *hatable, const int len)
release_hatable	url.h	/^void release_hatable(HaUrl *hatable, const int len);$/;"	p	signature:(HaUrl *hatable, const int len)
release_root_url	url.c	/^void release_root_url(RootUrl *root_url)$/;"	f	signature:(RootUrl *root_url)
release_root_url	url.h	/^void release_root_url(RootUrl *root_url);$/;"	p	signature:(RootUrl *root_url)
remove_url	url.c	/^void remove_url(RootUrl *root_url, const Url *url)$/;"	f	signature:(RootUrl *root_url, const Url *url)
remove_url	url.h	/^void remove_url(RootUrl *root_url, const Url *url);$/;"	p	signature:(RootUrl *root_url, const Url *url)
req	http.c	/^Req *req = NULL;	\/* 请求 *\/$/;"	v
req	http.h	/^typedef struct req {$/;"	s
req::begin	http.h	/^	unsigned int begin;	\/* 起始字节 *\/$/;"	m	struct:req	access:public
req::end	http.h	/^	unsigned int end;		\/* 结束字节 *\/$/;"	m	struct:req	access:public
req::host	http.h	/^	char host[H_LEN];		\/* 主机 *\/$/;"	m	struct:req	access:public
req::mthd	http.h	/^	enum method mthd;		\/* 请求方式 *\/$/;"	m	struct:req	typeref:enum:req::method	access:public
req::port	http.h	/^    unsigned int port;		\/* default: 80 *\/$/;"	m	struct:req	access:public
req::res	http.h	/^	char res[R_LEN];		\/* 资源位置 *\/$/;"	m	struct:req	access:public
req::str	http.h	/^	char str[MAX_LEN];		\/* 封装的请求头 *\/$/;"	m	struct:req	access:public
req::ver	http.h	/^	enum httpv ver;			\/* HTTP协议版本 *\/$/;"	m	struct:req	typeref:enum:req::httpv	access:public
res	http.h	/^	char res[R_LEN];		\/* 资源位置 *\/$/;"	m	struct:req	access:public
res	url.h	/^	char res[LLEN];		\/* the location of resource below the host *\/$/;"	m	struct:url	access:public
resp	http.c	/^Resp *resp = NULL;	\/* 回应 *\/$/;"	v
resp	http.h	/^typedef struct resp {$/;"	s
resp::begin	http.h	/^	unsigned begin;	\/* 回应的起始字节 *\/$/;"	m	struct:resp	access:public
resp::end	http.h	/^	unsigned end;		\/* 回应的结束字节 *\/$/;"	m	struct:resp	access:public
resp::status	http.h	/^	int status;				\/* 状态, eg: 206--> Partial Content *\/$/;"	m	struct:resp	access:public
resp::str	http.h	/^	char str[MAX_LEN];		\/* 封装的回应报文 *\/$/;"	m	struct:resp	access:public
resp::total_bytes	http.h	/^	unsigned total_bytes;	\/* 总字节数 *\/$/;"	m	struct:resp	access:public
resp::ver	http.h	/^	enum httpv ver;			\/* eg: HTTP\/1.1 --> HTTP1_1 *\/$/;"	m	struct:resp	typeref:enum:resp::httpv	access:public
resp::web_ser	http.h	/^	char web_ser[COM_LEN];	\/* 相应的Web服务器 *\/$/;"	m	struct:resp	access:public
resp_get_begin_bytes	http.c	/^int resp_get_begin_bytes(const char *resp)$/;"	f	signature:(const char *resp)
resp_get_begin_bytes	http.h	/^int resp_get_begin_bytes(const char *resp);$/;"	p	signature:(const char *resp)
resp_get_end_bytes	http.c	/^int resp_get_end_bytes(const char *resp)$/;"	f	signature:(const char *resp)
resp_get_end_bytes	http.h	/^int resp_get_end_bytes(const char *resp);$/;"	p	signature:(const char *resp)
resp_get_httpv	http.c	/^void resp_get_httpv(const char *resp, char *ver)$/;"	f	signature:(const char *resp, char *ver)
resp_get_httpv	http.h	/^void resp_get_httpv(const char *resp, char *ver);$/;"	p	signature:(const char *resp, char *ver)
resp_get_status	http.c	/^int resp_get_status(const char *resp)$/;"	f	signature:(const char *resp)
resp_get_status	http.h	/^int resp_get_status(const char *resp);$/;"	p	signature:(const char *resp)
resp_get_total_bytes	http.c	/^int resp_get_total_bytes(const char *resp)$/;"	f	signature:(const char *resp)
resp_get_total_bytes	http.h	/^int resp_get_total_bytes(const char *resp);$/;"	p	signature:(const char *resp)
resp_get_webserver	http.c	/^void resp_get_webserver(const char *resp, char *websrv)$/;"	f	signature:(const char *resp, char *websrv)
resp_get_webserver	http.h	/^void resp_get_webserver(const char *resp, char *websrv);$/;"	p	signature:(const char *resp, char *websrv)
root_bmsg	bmsg.c	/^RootBmsg *root_bmsg = NULL;$/;"	v
root_bmsg	bmsg.h	/^typedef struct root_bmsg {$/;"	s
root_bmsg::head	bmsg.h	/^	struct bmsg *head;$/;"	m	struct:root_bmsg	typeref:struct:root_bmsg::bmsg	access:public
root_bmsg::tail	bmsg.h	/^	struct bmsg *tail;$/;"	m	struct:root_bmsg	typeref:struct:root_bmsg::bmsg	access:public
root_url	mbdown.c	/^GLOBAL RootUrl *root_url;				\/* root url manager *\/$/;"	v
root_url	url.c	/^RootUrl *root_url = NULL;				\/* root url manager *\/$/;"	v
scheme	url.h	/^	char scheme[SLEN];	\/* protocal, eg: http *\/$/;"	m	struct:url	access:public
status	http.h	/^	int status;				\/* 状态, eg: 206--> Partial Content *\/$/;"	m	struct:resp	access:public
str	http.h	/^	char str[MAX_LEN];		\/* 封装的回应报文 *\/$/;"	m	struct:resp	access:public
str	http.h	/^	char str[MAX_LEN];		\/* 封装的请求头 *\/$/;"	m	struct:req	access:public
str_httpv_to_enum	http.c	/^void str_httpv_to_enum(const char *str, enum httpv *ver)$/;"	f	signature:(const char *str, enum httpv *ver)
str_httpv_to_enum	http.h	/^void str_httpv_to_enum(const char *str, enum httpv *ver);$/;"	p	signature:(const char *str, enum httpv *ver)
tail	bmsg.h	/^	struct bmsg *tail;$/;"	m	struct:root_bmsg	typeref:struct:root_bmsg::bmsg	access:public
thread_wait	synchro.c	/^void thread_wait(const int sec)$/;"	f	signature:(const int sec)
thread_wait	synchro.h	/^void thread_wait(const int sec);$/;"	p	signature:(const int sec)
to_bps	bmsg.h	/^	int to_bps;		\/* the numbsers of breakpoints *\/$/;"	m	struct:bmsg	access:public
to_bytes	bmsg.h	/^	int to_bytes;$/;"	m	struct:bmsg	access:public
total_bytes	http.h	/^	unsigned total_bytes;	\/* 总字节数 *\/$/;"	m	struct:resp	access:public
u_int	global.h	16;"	d
unhash_url	url.c	/^void unhash_url(HaUrl *url_htable, Url *url)$/;"	f	signature:(HaUrl *url_htable, Url *url)
unhash_url	url.h	/^void unhash_url(HaUrl *url_htable, Url *url);$/;"	p	signature:(HaUrl *url_htable, Url *url)
url	url.h	/^	char url[ULEN];		\/* complete url *\/$/;"	m	struct:url	access:public
url	url.h	/^	struct url *url;$/;"	m	struct:hash_url	typeref:struct:hash_url::url	access:public
url	url.h	/^typedef struct url {$/;"	s
url::host	url.h	/^	char host[HLEN];	\/* remote host, eg: www.innlab.net *\/$/;"	m	struct:url	access:public
url::id	url.h	/^	unsigned int id;				\/* unique id for quickly find *\/$/;"	m	struct:url	access:public
url::next	url.h	/^	struct url *next;	\/* single linked list *\/$/;"	m	struct:url	typeref:struct:url::url	access:public
url::port	url.h	/^	int port;$/;"	m	struct:url	access:public
url::res	url.h	/^	char res[LLEN];		\/* the location of resource below the host *\/$/;"	m	struct:url	access:public
url::scheme	url.h	/^	char scheme[SLEN];	\/* protocal, eg: http *\/$/;"	m	struct:url	access:public
url::url	url.h	/^	char url[ULEN];		\/* complete url *\/$/;"	m	struct:url	access:public
url_htable	mbdown.c	/^GLOBAL HaUrl url_htable[HALEN];			\/* hash table *\/$/;"	v
url_htable	url.c	/^HaUrl url_htable[HALEN];				\/* hash table *\/$/;"	v
url_id	bmsg.h	/^	int url_id;$/;"	m	struct:bmsg	access:public
ver	http.h	/^	enum httpv ver;			\/* HTTP协议版本 *\/$/;"	m	struct:req	typeref:enum:req::httpv	access:public
ver	http.h	/^	enum httpv ver;			\/* eg: HTTP\/1.1 --> HTTP1_1 *\/$/;"	m	struct:resp	typeref:enum:resp::httpv	access:public
web_ser	http.h	/^	char web_ser[COM_LEN];	\/* 相应的Web服务器 *\/$/;"	m	struct:resp	access:public
